{
  "language": "Solidity",
  "sources": {
    "@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface AggregatorV3Interface {\n  function decimals() external view returns (uint8);\n\n  function description() external view returns (string memory);\n\n  function version() external view returns (uint256);\n\n  function getRoundData(uint80 _roundId)\n    external\n    view\n    returns (\n      uint80 roundId,\n      int256 answer,\n      uint256 startedAt,\n      uint256 updatedAt,\n      uint80 answeredInRound\n    );\n\n  function latestRoundData()\n    external\n    view\n    returns (\n      uint80 roundId,\n      int256 answer,\n      uint256 startedAt,\n      uint256 updatedAt,\n      uint80 answeredInRound\n    );\n}\n"
    },
    "contracts/FundMe.sol": {
      "content": "//Get funds from users\n//withdraw funds\n//set a minimum funding value in USD\n\n//SPDX-License-Identifier: MIT\n//gas cost: 914259 -> 891771 constant/immutable\npragma solidity ^0.8.8;\n\nimport \"./PriceConverter.sol\";\n\nerror NotOwner();\n\ncontract FundMe {\n    using PriceConverter for uint256;\n    /**\n     * Returns the latest price\n     */\n\n    uint256 public constant MINIMUM_USD = 50 * 1e18;\n\n    address[] public funders;\n    mapping(address => uint256) public addressToAmountFunded;\n\n    address public immutable i_owner; // only set once\n    AggregatorV3Interface public priceFeed;\n\n    constructor(address priceFeedAddress) {\n        i_owner = msg.sender; //msg.sender of constructor is the one who deploys the contract!!\n        priceFeed = AggregatorV3Interface(priceFeedAddress);\n    }\n\n    function fund() public payable {\n        // payable -> now you can send funds to this function\n        // https://api -> not possible, as no consensus is possible on chain !!!!!!!!\n\n        //Want to be able to set a minimum fund in USD\n        //1. How do we send eth to this contract ?\n        //require is a checker\n\n        require(\n            msg.value.getConversionRate(priceFeed) >= MINIMUM_USD,\n            \"Didn't send enough eth\"\n        ); // 1e18 = 1* 10 **18 = 1000000000000000000 (18Nullen)\n        funders.push(msg.sender); // whoever called the fund function\n        addressToAmountFunded[msg.sender] = msg.value;\n\n        //Chainlink data feeds - DeFi data\n        // price data of different exchanges and data providers\n    }\n\n    function withdraw() public onlyOwner {\n        // require(msg.sender == owner,\"Sender is not Owner!\"); //as we use require, we would throw error -> do it as modifier\n        for (\n            uint256 funderIndex = 0;\n            funderIndex < funders.length;\n            funderIndex = funderIndex++\n        ) {\n            address funder = funders[funderIndex];\n            addressToAmountFunded[funder] = 0;\n        }\n        funders = new address[](0); //array with 0 objects to start\n        (\n            bool callSuccess, /*bytes memory dataReturned */\n\n        ) = payable(msg.sender).call{value: address(this).balance}(\"\");\n        require(callSuccess, \"Call failed\");\n    }\n\n    modifier onlyOwner() {\n        if (msg.sender != i_owner) {\n            revert NotOwner();\n        }\n        //require(msg.sender == i_owner,\"Sender is not Owner!\");\n        _; // function execution AFTER the require statement (could be on top, then function will be executed first\n    }\n\n    //What happens if someones sends this contract eth without calling fund() function\n\n    receive() external payable {\n        fund();\n    }\n\n    fallback() external payable {\n        fund();\n    }\n}\n"
    },
    "contracts/PriceConverter.sol": {
      "content": "//SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\nimport \"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\";\r\n\r\nlibrary PriceConverter {\r\n    function getPrice(AggregatorV3Interface priceFeed)\r\n        internal\r\n        view\r\n        returns (uint256)\r\n    {\r\n        // ABI\r\n        // Address 0xD4a33860578De61DBAbDc8BFdb98FD742fA7028e\r\n        (, int256 price, , , ) = priceFeed.latestRoundData();\r\n        //ETH in terms of USD\r\n        // 3000.00000000 -> 8 decimal places associated to this price feed\r\n        return uint256(price * 1e10); //1**10 == 10000000000\r\n    }\r\n\r\n    function getConversionRate(\r\n        uint256 ethAmount,\r\n        AggregatorV3Interface priceFeed\r\n    ) internal view returns (uint256) {\r\n        uint256 ethPrice = getPrice(priceFeed);\r\n        // eth price 3000$ ->3000.000000000000000000 ist ETH/USD price feed\r\n        uint256 ethAmountInUsd = (ethPrice * ethAmount) / 1e18;\r\n        // 3000\r\n        return ethAmountInUsd;\r\n    }\r\n}\r\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}